//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from NML.g4 by ANTLR 4.9

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace NML.Parser.Generated {
 #pragma warning disable 3021 
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9")]
[System.CLSCompliant(false)]
public partial class NMLParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, OPEN_BRACE=5, CLOSE_BRACE=6, COLON=7, 
		SEMICOLON=8, COMPARE_TOKENS=9, ADDICTIVE_OPERATORS=10, MULTIPLICATIVE_OPERATORS=11, 
		DOT=12, DOLLAR_SIGN=13, SET=14, DECLARE=15, USING=16, FOR=17, WHEN=18, 
		IN=19, FROM=20, THEN=21, ELSE=22, IDENTIFIER=23, STRING=24, NUMBER=25, 
		LITERAL=26, PROPERTY_NAME=27, LINE_COMMENT=28, WS=29;
	public const int
		RULE_nml = 0, RULE_headers = 1, RULE_setheader = 2, RULE_assignheader = 3, 
		RULE_element = 4, RULE_elementkey = 5, RULE_with = 6, RULE_loop = 7, RULE_when = 8, 
		RULE_pair = 9, RULE_key = 10, RULE_value = 11, RULE_list = 12, RULE_concat = 13;
	public static readonly string[] ruleNames = {
		"nml", "headers", "setheader", "assignheader", "element", "elementkey", 
		"with", "loop", "when", "pair", "key", "value", "list", "concat"
	};

	private static readonly string[] _LiteralNames = {
		null, "'#'", "'('", "','", "')'", "'{'", "'}'", "':'", "';'", null, null, 
		null, "'.'", "'$'", "'set'", "'declare'", "'using'", "'for'", null, "'in'", 
		"'from'", "'then'", "'else'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, "OPEN_BRACE", "CLOSE_BRACE", "COLON", "SEMICOLON", 
		"COMPARE_TOKENS", "ADDICTIVE_OPERATORS", "MULTIPLICATIVE_OPERATORS", "DOT", 
		"DOLLAR_SIGN", "SET", "DECLARE", "USING", "FOR", "WHEN", "IN", "FROM", 
		"THEN", "ELSE", "IDENTIFIER", "STRING", "NUMBER", "LITERAL", "PROPERTY_NAME", 
		"LINE_COMMENT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "NML.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static NMLParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public NMLParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public NMLParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class NmlContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public HeadersContext headers() {
			return GetRuleContext<HeadersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElementContext[] element() {
			return GetRuleContexts<ElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElementContext element(int i) {
			return GetRuleContext<ElementContext>(i);
		}
		public NmlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nml; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INMLVisitor<TResult> typedVisitor = visitor as INMLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNml(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NmlContext nml() {
		NmlContext _localctx = new NmlContext(Context, State);
		EnterRule(_localctx, 0, RULE_nml);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 29;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SET || _la==DECLARE) {
				{
				State = 28; headers();
				}
			}

			State = 32;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 31; element();
				}
				}
				State = 34;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==OPEN_BRACE || _la==IDENTIFIER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HeadersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SetheaderContext[] setheader() {
			return GetRuleContexts<SetheaderContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SetheaderContext setheader(int i) {
			return GetRuleContext<SetheaderContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignheaderContext[] assignheader() {
			return GetRuleContexts<AssignheaderContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignheaderContext assignheader(int i) {
			return GetRuleContext<AssignheaderContext>(i);
		}
		public HeadersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_headers; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INMLVisitor<TResult> typedVisitor = visitor as INMLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHeaders(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HeadersContext headers() {
		HeadersContext _localctx = new HeadersContext(Context, State);
		EnterRule(_localctx, 2, RULE_headers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 38;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 38;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case SET:
					{
					State = 36; setheader();
					}
					break;
				case DECLARE:
					{
					State = 37; assignheader();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 40;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==SET || _la==DECLARE );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetheaderContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(NMLParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROPERTY_NAME() { return GetToken(NMLParser.PROPERTY_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(NMLParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(NMLParser.SEMICOLON, 0); }
		public SetheaderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setheader; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INMLVisitor<TResult> typedVisitor = visitor as INMLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetheader(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetheaderContext setheader() {
		SetheaderContext _localctx = new SetheaderContext(Context, State);
		EnterRule(_localctx, 4, RULE_setheader);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 42; Match(SET);
			State = 43; Match(PROPERTY_NAME);
			State = 44; Match(STRING);
			State = 46;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEMICOLON) {
				{
				State = 45; Match(SEMICOLON);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignheaderContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECLARE() { return GetToken(NMLParser.DECLARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(NMLParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(NMLParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(NMLParser.SEMICOLON, 0); }
		public AssignheaderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignheader; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INMLVisitor<TResult> typedVisitor = visitor as INMLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignheader(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignheaderContext assignheader() {
		AssignheaderContext _localctx = new AssignheaderContext(Context, State);
		EnterRule(_localctx, 6, RULE_assignheader);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 48; Match(DECLARE);
			State = 49; Match(IDENTIFIER);
			State = 50; Match(STRING);
			State = 52;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEMICOLON) {
				{
				State = 51; Match(SEMICOLON);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ElementkeyContext elementkey() {
			return GetRuleContext<ElementkeyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(NMLParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(NMLParser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(NMLParser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PairContext[] pair() {
			return GetRuleContexts<PairContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PairContext pair(int i) {
			return GetRuleContext<PairContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElementContext[] element() {
			return GetRuleContexts<ElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElementContext element(int i) {
			return GetRuleContext<ElementContext>(i);
		}
		public ElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_element; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INMLVisitor<TResult> typedVisitor = visitor as INMLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementContext element() {
		ElementContext _localctx = new ElementContext(Context, State);
		EnterRule(_localctx, 8, RULE_element);
		int _la;
		try {
			State = 69;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 54; elementkey();
				State = 55; Match(SEMICOLON);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 58;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IDENTIFIER) {
					{
					State = 57; elementkey();
					}
				}

				State = 60; Match(OPEN_BRACE);
				State = 65;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==OPEN_BRACE || _la==IDENTIFIER) {
					{
					State = 63;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
					case 1:
						{
						State = 61; pair();
						}
						break;
					case 2:
						{
						State = 62; element();
						}
						break;
					}
					}
					State = 67;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 68; Match(CLOSE_BRACE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementkeyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(NMLParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(NMLParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(NMLParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WithContext with() {
			return GetRuleContext<WithContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoopContext loop() {
			return GetRuleContext<LoopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhenContext when() {
			return GetRuleContext<WhenContext>(0);
		}
		public ElementkeyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementkey; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INMLVisitor<TResult> typedVisitor = visitor as INMLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElementkey(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementkeyContext elementkey() {
		ElementkeyContext _localctx = new ElementkeyContext(Context, State);
		EnterRule(_localctx, 10, RULE_elementkey);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 71; Match(IDENTIFIER);
			State = 74;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__0) {
				{
				State = 72; Match(T__0);
				State = 73; Match(IDENTIFIER);
				}
			}

			State = 76; Match(COLON);
			State = 78;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==USING) {
				{
				State = 77; with();
				}
			}

			State = 81;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FOR) {
				{
				State = 80; loop();
				}
			}

			State = 84;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHEN) {
				{
				State = 83; when();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WithContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(NMLParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(NMLParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(NMLParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(NMLParser.FROM, 0); }
		public WithContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_with; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INMLVisitor<TResult> typedVisitor = visitor as INMLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWith(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WithContext with() {
		WithContext _localctx = new WithContext(Context, State);
		EnterRule(_localctx, 12, RULE_with);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 86; Match(USING);
			State = 87; Match(IDENTIFIER);
			State = 90;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FROM) {
				{
				State = 88; Match(FROM);
				State = 89; Match(IDENTIFIER);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(NMLParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(NMLParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(NMLParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(NMLParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROPERTY_NAME() { return GetToken(NMLParser.PROPERTY_NAME, 0); }
		public LoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INMLVisitor<TResult> typedVisitor = visitor as INMLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopContext loop() {
		LoopContext _localctx = new LoopContext(Context, State);
		EnterRule(_localctx, 14, RULE_loop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 92; Match(FOR);
			State = 93; Match(IDENTIFIER);
			State = 94; Match(IN);
			State = 95;
			_la = TokenStream.LA(1);
			if ( !(_la==IDENTIFIER || _la==PROPERTY_NAME) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhenContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHEN() { return GetToken(NMLParser.WHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROPERTY_NAME() { return GetToken(NMLParser.PROPERTY_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPARE_TOKENS() { return GetToken(NMLParser.COMPARE_TOKENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(NMLParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(NMLParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LITERAL() { return GetToken(NMLParser.LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConcatContext concat() {
			return GetRuleContext<ConcatContext>(0);
		}
		public WhenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_when; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INMLVisitor<TResult> typedVisitor = visitor as INMLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhen(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhenContext when() {
		WhenContext _localctx = new WhenContext(Context, State);
		EnterRule(_localctx, 16, RULE_when);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 97; Match(WHEN);
			State = 98; Match(PROPERTY_NAME);
			State = 99; Match(COMPARE_TOKENS);
			State = 104;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING:
				{
				State = 100; Match(STRING);
				}
				break;
			case NUMBER:
				{
				State = 101; Match(NUMBER);
				}
				break;
			case LITERAL:
				{
				State = 102; Match(LITERAL);
				}
				break;
			case T__1:
			case DOLLAR_SIGN:
				{
				State = 103; concat();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PairContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public KeyContext key() {
			return GetRuleContext<KeyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(NMLParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(NMLParser.SEMICOLON, 0); }
		public PairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pair; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INMLVisitor<TResult> typedVisitor = visitor as INMLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPair(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PairContext pair() {
		PairContext _localctx = new PairContext(Context, State);
		EnterRule(_localctx, 18, RULE_pair);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 106; key();
			State = 107; Match(COLON);
			State = 108; value();
			State = 110;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEMICOLON) {
				{
				State = 109; Match(SEMICOLON);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(NMLParser.IDENTIFIER, 0); }
		public KeyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_key; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INMLVisitor<TResult> typedVisitor = visitor as INMLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKey(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeyContext key() {
		KeyContext _localctx = new KeyContext(Context, State);
		EnterRule(_localctx, 20, RULE_key);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 112; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(NMLParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROPERTY_NAME() { return GetToken(NMLParser.PROPERTY_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(NMLParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(NMLParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LITERAL() { return GetToken(NMLParser.LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConcatContext concat() {
			return GetRuleContext<ConcatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ListContext list() {
			return GetRuleContext<ListContext>(0);
		}
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INMLVisitor<TResult> typedVisitor = visitor as INMLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 22, RULE_value);
		try {
			State = 121;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 114; Match(STRING);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 115; Match(PROPERTY_NAME);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 116; Match(IDENTIFIER);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 117; Match(NUMBER);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 118; Match(LITERAL);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 119; concat();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 120; list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(NMLParser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(NMLParser.STRING, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NUMBER() { return GetTokens(NMLParser.NUMBER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER(int i) {
			return GetToken(NMLParser.NUMBER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LITERAL() { return GetTokens(NMLParser.LITERAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LITERAL(int i) {
			return GetToken(NMLParser.LITERAL, i);
		}
		public ListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INMLVisitor<TResult> typedVisitor = visitor as INMLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListContext list() {
		ListContext _localctx = new ListContext(Context, State);
		EnterRule(_localctx, 24, RULE_list);
		int _la;
		try {
			State = 135;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 123; Match(T__1);
				State = 128;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 124;
					_la = TokenStream.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STRING) | (1L << NUMBER) | (1L << LITERAL))) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 126;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==T__2) {
						{
						State = 125; Match(T__2);
						}
					}

					}
					}
					State = 130;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STRING) | (1L << NUMBER) | (1L << LITERAL))) != 0) );
				State = 132; Match(T__3);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 133; Match(T__1);
				State = 134; Match(T__3);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConcatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOLLAR_SIGN() { return GetToken(NMLParser.DOLLAR_SIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(NMLParser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(NMLParser.STRING, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NUMBER() { return GetTokens(NMLParser.NUMBER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER(int i) {
			return GetToken(NMLParser.NUMBER, i);
		}
		public ConcatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_concat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INMLVisitor<TResult> typedVisitor = visitor as INMLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConcat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConcatContext concat() {
		ConcatContext _localctx = new ConcatContext(Context, State);
		EnterRule(_localctx, 26, RULE_concat);
		int _la;
		try {
			State = 150;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DOLLAR_SIGN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 137; Match(DOLLAR_SIGN);
				State = 138; Match(T__1);
				State = 143;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 139;
					_la = TokenStream.LA(1);
					if ( !(_la==STRING || _la==NUMBER) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 141;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==T__2) {
						{
						State = 140; Match(T__2);
						}
					}

					}
					}
					State = 145;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==STRING || _la==NUMBER );
				State = 147; Match(T__3);
				}
				break;
			case T__1:
				EnterOuterAlt(_localctx, 2);
				{
				State = 148; Match(T__1);
				State = 149; Match(T__3);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x1F', '\x9B', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x3', '\x2', '\x5', '\x2', ' ', '\n', 
		'\x2', '\x3', '\x2', '\x6', '\x2', '#', '\n', '\x2', '\r', '\x2', '\xE', 
		'\x2', '$', '\x3', '\x3', '\x3', '\x3', '\x6', '\x3', ')', '\n', '\x3', 
		'\r', '\x3', '\xE', '\x3', '*', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x5', '\x4', '\x31', '\n', '\x4', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '\x37', '\n', '\x5', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', 
		'=', '\n', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\a', '\x6', 
		'\x42', '\n', '\x6', '\f', '\x6', '\xE', '\x6', '\x45', '\v', '\x6', '\x3', 
		'\x6', '\x5', '\x6', 'H', '\n', '\x6', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x5', '\a', 'M', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', 
		'Q', '\n', '\a', '\x3', '\a', '\x5', '\a', 'T', '\n', '\a', '\x3', '\a', 
		'\x5', '\a', 'W', '\n', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x5', '\b', ']', '\n', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x5', '\n', 'k', '\n', '\n', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x5', '\v', 'q', 
		'\n', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x5', '\r', 
		'|', '\n', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', 
		'\x81', '\n', '\xE', '\x6', '\xE', '\x83', '\n', '\xE', '\r', '\xE', '\xE', 
		'\xE', '\x84', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', 
		'\x8A', '\n', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x5', '\xF', '\x90', '\n', '\xF', '\x6', '\xF', '\x92', '\n', 
		'\xF', '\r', '\xF', '\xE', '\xF', '\x93', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x5', '\xF', '\x99', '\n', '\xF', '\x3', '\xF', '\x2', 
		'\x2', '\x10', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', 
		'\x14', '\x16', '\x18', '\x1A', '\x1C', '\x2', '\x5', '\x4', '\x2', '\x19', 
		'\x19', '\x1D', '\x1D', '\x3', '\x2', '\x1A', '\x1C', '\x3', '\x2', '\x1A', 
		'\x1B', '\x2', '\xAB', '\x2', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x4', 
		'(', '\x3', '\x2', '\x2', '\x2', '\x6', ',', '\x3', '\x2', '\x2', '\x2', 
		'\b', '\x32', '\x3', '\x2', '\x2', '\x2', '\n', 'G', '\x3', '\x2', '\x2', 
		'\x2', '\f', 'I', '\x3', '\x2', '\x2', '\x2', '\xE', 'X', '\x3', '\x2', 
		'\x2', '\x2', '\x10', '^', '\x3', '\x2', '\x2', '\x2', '\x12', '\x63', 
		'\x3', '\x2', '\x2', '\x2', '\x14', 'l', '\x3', '\x2', '\x2', '\x2', '\x16', 
		'r', '\x3', '\x2', '\x2', '\x2', '\x18', '{', '\x3', '\x2', '\x2', '\x2', 
		'\x1A', '\x89', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x98', '\x3', '\x2', 
		'\x2', '\x2', '\x1E', ' ', '\x5', '\x4', '\x3', '\x2', '\x1F', '\x1E', 
		'\x3', '\x2', '\x2', '\x2', '\x1F', ' ', '\x3', '\x2', '\x2', '\x2', ' ', 
		'\"', '\x3', '\x2', '\x2', '\x2', '!', '#', '\x5', '\n', '\x6', '\x2', 
		'\"', '!', '\x3', '\x2', '\x2', '\x2', '#', '$', '\x3', '\x2', '\x2', 
		'\x2', '$', '\"', '\x3', '\x2', '\x2', '\x2', '$', '%', '\x3', '\x2', 
		'\x2', '\x2', '%', '\x3', '\x3', '\x2', '\x2', '\x2', '&', ')', '\x5', 
		'\x6', '\x4', '\x2', '\'', ')', '\x5', '\b', '\x5', '\x2', '(', '&', '\x3', 
		'\x2', '\x2', '\x2', '(', '\'', '\x3', '\x2', '\x2', '\x2', ')', '*', 
		'\x3', '\x2', '\x2', '\x2', '*', '(', '\x3', '\x2', '\x2', '\x2', '*', 
		'+', '\x3', '\x2', '\x2', '\x2', '+', '\x5', '\x3', '\x2', '\x2', '\x2', 
		',', '-', '\a', '\x10', '\x2', '\x2', '-', '.', '\a', '\x1D', '\x2', '\x2', 
		'.', '\x30', '\a', '\x1A', '\x2', '\x2', '/', '\x31', '\a', '\n', '\x2', 
		'\x2', '\x30', '/', '\x3', '\x2', '\x2', '\x2', '\x30', '\x31', '\x3', 
		'\x2', '\x2', '\x2', '\x31', '\a', '\x3', '\x2', '\x2', '\x2', '\x32', 
		'\x33', '\a', '\x11', '\x2', '\x2', '\x33', '\x34', '\a', '\x19', '\x2', 
		'\x2', '\x34', '\x36', '\a', '\x1A', '\x2', '\x2', '\x35', '\x37', '\a', 
		'\n', '\x2', '\x2', '\x36', '\x35', '\x3', '\x2', '\x2', '\x2', '\x36', 
		'\x37', '\x3', '\x2', '\x2', '\x2', '\x37', '\t', '\x3', '\x2', '\x2', 
		'\x2', '\x38', '\x39', '\x5', '\f', '\a', '\x2', '\x39', ':', '\a', '\n', 
		'\x2', '\x2', ':', 'H', '\x3', '\x2', '\x2', '\x2', ';', '=', '\x5', '\f', 
		'\a', '\x2', '<', ';', '\x3', '\x2', '\x2', '\x2', '<', '=', '\x3', '\x2', 
		'\x2', '\x2', '=', '>', '\x3', '\x2', '\x2', '\x2', '>', '\x43', '\a', 
		'\a', '\x2', '\x2', '?', '\x42', '\x5', '\x14', '\v', '\x2', '@', '\x42', 
		'\x5', '\n', '\x6', '\x2', '\x41', '?', '\x3', '\x2', '\x2', '\x2', '\x41', 
		'@', '\x3', '\x2', '\x2', '\x2', '\x42', '\x45', '\x3', '\x2', '\x2', 
		'\x2', '\x43', '\x41', '\x3', '\x2', '\x2', '\x2', '\x43', '\x44', '\x3', 
		'\x2', '\x2', '\x2', '\x44', '\x46', '\x3', '\x2', '\x2', '\x2', '\x45', 
		'\x43', '\x3', '\x2', '\x2', '\x2', '\x46', 'H', '\a', '\b', '\x2', '\x2', 
		'G', '\x38', '\x3', '\x2', '\x2', '\x2', 'G', '<', '\x3', '\x2', '\x2', 
		'\x2', 'H', '\v', '\x3', '\x2', '\x2', '\x2', 'I', 'L', '\a', '\x19', 
		'\x2', '\x2', 'J', 'K', '\a', '\x3', '\x2', '\x2', 'K', 'M', '\a', '\x19', 
		'\x2', '\x2', 'L', 'J', '\x3', '\x2', '\x2', '\x2', 'L', 'M', '\x3', '\x2', 
		'\x2', '\x2', 'M', 'N', '\x3', '\x2', '\x2', '\x2', 'N', 'P', '\a', '\t', 
		'\x2', '\x2', 'O', 'Q', '\x5', '\xE', '\b', '\x2', 'P', 'O', '\x3', '\x2', 
		'\x2', '\x2', 'P', 'Q', '\x3', '\x2', '\x2', '\x2', 'Q', 'S', '\x3', '\x2', 
		'\x2', '\x2', 'R', 'T', '\x5', '\x10', '\t', '\x2', 'S', 'R', '\x3', '\x2', 
		'\x2', '\x2', 'S', 'T', '\x3', '\x2', '\x2', '\x2', 'T', 'V', '\x3', '\x2', 
		'\x2', '\x2', 'U', 'W', '\x5', '\x12', '\n', '\x2', 'V', 'U', '\x3', '\x2', 
		'\x2', '\x2', 'V', 'W', '\x3', '\x2', '\x2', '\x2', 'W', '\r', '\x3', 
		'\x2', '\x2', '\x2', 'X', 'Y', '\a', '\x12', '\x2', '\x2', 'Y', '\\', 
		'\a', '\x19', '\x2', '\x2', 'Z', '[', '\a', '\x16', '\x2', '\x2', '[', 
		']', '\a', '\x19', '\x2', '\x2', '\\', 'Z', '\x3', '\x2', '\x2', '\x2', 
		'\\', ']', '\x3', '\x2', '\x2', '\x2', ']', '\xF', '\x3', '\x2', '\x2', 
		'\x2', '^', '_', '\a', '\x13', '\x2', '\x2', '_', '`', '\a', '\x19', '\x2', 
		'\x2', '`', '\x61', '\a', '\x15', '\x2', '\x2', '\x61', '\x62', '\t', 
		'\x2', '\x2', '\x2', '\x62', '\x11', '\x3', '\x2', '\x2', '\x2', '\x63', 
		'\x64', '\a', '\x14', '\x2', '\x2', '\x64', '\x65', '\a', '\x1D', '\x2', 
		'\x2', '\x65', 'j', '\a', '\v', '\x2', '\x2', '\x66', 'k', '\a', '\x1A', 
		'\x2', '\x2', 'g', 'k', '\a', '\x1B', '\x2', '\x2', 'h', 'k', '\a', '\x1C', 
		'\x2', '\x2', 'i', 'k', '\x5', '\x1C', '\xF', '\x2', 'j', '\x66', '\x3', 
		'\x2', '\x2', '\x2', 'j', 'g', '\x3', '\x2', '\x2', '\x2', 'j', 'h', '\x3', 
		'\x2', '\x2', '\x2', 'j', 'i', '\x3', '\x2', '\x2', '\x2', 'k', '\x13', 
		'\x3', '\x2', '\x2', '\x2', 'l', 'm', '\x5', '\x16', '\f', '\x2', 'm', 
		'n', '\a', '\t', '\x2', '\x2', 'n', 'p', '\x5', '\x18', '\r', '\x2', 'o', 
		'q', '\a', '\n', '\x2', '\x2', 'p', 'o', '\x3', '\x2', '\x2', '\x2', 'p', 
		'q', '\x3', '\x2', '\x2', '\x2', 'q', '\x15', '\x3', '\x2', '\x2', '\x2', 
		'r', 's', '\a', '\x19', '\x2', '\x2', 's', '\x17', '\x3', '\x2', '\x2', 
		'\x2', 't', '|', '\a', '\x1A', '\x2', '\x2', 'u', '|', '\a', '\x1D', '\x2', 
		'\x2', 'v', '|', '\a', '\x19', '\x2', '\x2', 'w', '|', '\a', '\x1B', '\x2', 
		'\x2', 'x', '|', '\a', '\x1C', '\x2', '\x2', 'y', '|', '\x5', '\x1C', 
		'\xF', '\x2', 'z', '|', '\x5', '\x1A', '\xE', '\x2', '{', 't', '\x3', 
		'\x2', '\x2', '\x2', '{', 'u', '\x3', '\x2', '\x2', '\x2', '{', 'v', '\x3', 
		'\x2', '\x2', '\x2', '{', 'w', '\x3', '\x2', '\x2', '\x2', '{', 'x', '\x3', 
		'\x2', '\x2', '\x2', '{', 'y', '\x3', '\x2', '\x2', '\x2', '{', 'z', '\x3', 
		'\x2', '\x2', '\x2', '|', '\x19', '\x3', '\x2', '\x2', '\x2', '}', '\x82', 
		'\a', '\x4', '\x2', '\x2', '~', '\x80', '\t', '\x3', '\x2', '\x2', '\x7F', 
		'\x81', '\a', '\x5', '\x2', '\x2', '\x80', '\x7F', '\x3', '\x2', '\x2', 
		'\x2', '\x80', '\x81', '\x3', '\x2', '\x2', '\x2', '\x81', '\x83', '\x3', 
		'\x2', '\x2', '\x2', '\x82', '~', '\x3', '\x2', '\x2', '\x2', '\x83', 
		'\x84', '\x3', '\x2', '\x2', '\x2', '\x84', '\x82', '\x3', '\x2', '\x2', 
		'\x2', '\x84', '\x85', '\x3', '\x2', '\x2', '\x2', '\x85', '\x86', '\x3', 
		'\x2', '\x2', '\x2', '\x86', '\x8A', '\a', '\x6', '\x2', '\x2', '\x87', 
		'\x88', '\a', '\x4', '\x2', '\x2', '\x88', '\x8A', '\a', '\x6', '\x2', 
		'\x2', '\x89', '}', '\x3', '\x2', '\x2', '\x2', '\x89', '\x87', '\x3', 
		'\x2', '\x2', '\x2', '\x8A', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x8B', 
		'\x8C', '\a', '\xF', '\x2', '\x2', '\x8C', '\x91', '\a', '\x4', '\x2', 
		'\x2', '\x8D', '\x8F', '\t', '\x4', '\x2', '\x2', '\x8E', '\x90', '\a', 
		'\x5', '\x2', '\x2', '\x8F', '\x8E', '\x3', '\x2', '\x2', '\x2', '\x8F', 
		'\x90', '\x3', '\x2', '\x2', '\x2', '\x90', '\x92', '\x3', '\x2', '\x2', 
		'\x2', '\x91', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x92', '\x93', '\x3', 
		'\x2', '\x2', '\x2', '\x93', '\x91', '\x3', '\x2', '\x2', '\x2', '\x93', 
		'\x94', '\x3', '\x2', '\x2', '\x2', '\x94', '\x95', '\x3', '\x2', '\x2', 
		'\x2', '\x95', '\x99', '\a', '\x6', '\x2', '\x2', '\x96', '\x97', '\a', 
		'\x4', '\x2', '\x2', '\x97', '\x99', '\a', '\x6', '\x2', '\x2', '\x98', 
		'\x8B', '\x3', '\x2', '\x2', '\x2', '\x98', '\x96', '\x3', '\x2', '\x2', 
		'\x2', '\x99', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x1F', '$', 
		'(', '*', '\x30', '\x36', '<', '\x41', '\x43', 'G', 'L', 'P', 'S', 'V', 
		'\\', 'j', 'p', '{', '\x80', '\x84', '\x89', '\x8F', '\x93', '\x98',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace NML.Parser.Generated
